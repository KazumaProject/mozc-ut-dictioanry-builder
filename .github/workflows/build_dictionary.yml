# This workflow builds, tests, and releases the dictionary files.
# It can be triggered manually, on a schedule, or when a new tag is pushed.

name: Build and Update Dictionaries

# Controls when the action will run.
on:
  # Allows manual runs from the Actions tab on GitHub.
  workflow_dispatch:

  # Runs on a schedule (at 00:00 on Jan 1st and Jul 1st).
  schedule:
    - cron: '0 0 1 1,7 *'

  # Runs when a tag matching the v*.*.* pattern is pushed.
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Define permissions for the job.
    # 'contents: write' is required for committing files and creating releases.
    permissions:
      contents: write

    steps:
      # 1. Check out your repository code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up the specific version of Python required by the script.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Install Python dependencies defined in the script.
      - name: Install dependencies
        run: |
          set -x # Print each command before executing it
          python -m pip install --upgrade pip
          pip install kanjiconv sudachipy sudachidict_core

      # 4. Prepare all source dictionary files needed by the Python script.
      - name: Prepare Dictionary Files
        run: |
          set -x # Print each command for debugging
          echo "--- Setting up directories ---"
          mkdir mozc dic
          
          echo "--- Current directory contents ---"
          ls -l

          echo "--- Cloning merge-ut-dictionaries ---"
          git clone https://github.com/utuhiro78/merge-ut-dictionaries.git
          
          echo "--- Verifying cloned directory structure ---"
          ls -lR merge-ut-dictionaries
          
          echo "--- Running build script in merge-ut-dictionaries/src directory ---"
          # Add 'ls -l' inside the subshell to debug the "No such file" error.
          # This will list the contents of the directory right before execution.
          (cd merge-ut-dictionaries/src && echo "--- Contents of src directory: ---" && ls -l && sh make.sh)
          echo "--- Build script finished ---"

          echo "--- Moving generated dic files ---"
          mv merge-ut-dictionaries/work/jawiki-place.*.txt ./dic/place.txt
          mv merge-ut-dictionaries/work/jp-names.*.txt ./dic/names.txt
          mv merge-ut-dictionaries/work/wikipedia.*.txt ./dic/wiki.txt
          mv merge-ut-dictionaries/work/NEologd.*-u.txt ./dic/neologd.txt
          
          echo "--- Verifying contents of ./dic directory ---"
          ls -lR dic
          
          echo "--- Downloading Mozc dictionary files ---"
          MOZC_BASE_URL="https://raw.githubusercontent.com/google/mozc/master/src/data/dictionary_oss"
          for i in $(seq -f "%02g" 0 9); do
            wget -P ./mozc/ "${MOZC_BASE_URL}/dictionary${i}.txt"
          done
          wget -P ./mozc/ "${MOZC_BASE_URL}/suffix.txt"

          echo "--- Verifying contents of ./mozc directory ---"
          ls -lR mozc
          echo "--- Source dic files prepared. ---"

      # 5. Run the main Python script to process and filter all dictionaries.
      - name: Run dictionary processing script
        run: |
          set -x # Print each command for debugging
          echo "--- Listing files before running Python script ---"
          ls -lR
          echo "--- Running Python script ---"
          python ./process_dictionaries.py
          echo "--- Python script finished ---"
          echo "--- Listing generated .txt files ---"
          ls -l *.txt

      # 6. Commit and push updated files on scheduled runs.
      - name: Commit files
        if: github.event_name == 'schedule'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(bot): Automatically update dictionary files"
          file_pattern: "*.txt" # Commits all changed .txt files in the root.
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "GitHub Actions Bot <github-actions[bot]@users.noreply.github.com>"

      # 7. Package generated dictionary files into a zip archive for the release.
      - name: Package release artifacts
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -x # Print each command for debugging
          echo "--- Listing files to be zipped ---"
          ls -l *.txt
          zip dictionary-artifacts.zip *.txt
          echo "--- Verifying created zip file ---"
          ls -l dictionary-artifacts.zip

      # 8. Create a new GitHub Release and upload the zip archive as an asset.
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dictionary-artifacts.zip
          name: Dictionary Release ${{ github.ref_name }}
          body: |
            Automated release of updated dictionary files.
            The attached zip file contains all generated dictionaries.
