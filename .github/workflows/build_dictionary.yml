# This workflow builds, tests, and releases the dictionary files.
# It can be triggered manually, on a schedule, or when a new tag is pushed.

name: Build and Update Dictionaries

# Controls when the action will run.
on:
  # Allows manual runs from the Actions tab on GitHub.
  workflow_dispatch:

  # Runs on a schedule (at 00:00 on Jan 1st and Jul 1st).
  schedule:
    - cron: '0 0 1 1,7 *'

  # Runs when a tag matching the v*.*.* pattern is pushed.
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Define permissions for the job.
    # 'contents: write' is required for committing files and creating releases.
    permissions:
      contents: write

    steps:
      # 1. Check out your repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # <<< DEBUG: Show runner environment details >>>
      - name: Show Environment Details
        run: |
          echo "--- Runner Environment Info ---"
          echo "User: $(whoami)"
          echo "Architecture: $(uname -a)"
          echo "Disk Space:"
          df -h
          echo "---------------------------"

      # 2. Set up the specific version of Python.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Install all required Python dependencies.
      - name: Install dependencies
        run: |
          set -x
          python -m pip install --upgrade pip
          pip install kanjiconv sudachipy sudachidict_core jaconv
          # <<< DEBUG: List installed packages to verify versions >>>
          echo "--- Installed Python Packages ---"
          pip list
          echo "---------------------------------"

      # 4. Generate source dictionary files.
      - name: Generate Source Dictionaries
        run: |
          set -ex

          echo "--- Setting up directories ---"
          mkdir -p ./dic ./build_temp
          cd build_temp
          
          echo "--- Cloning dictionary generation scripts ---"
          git clone --depth 1 https://github.com/utuhiro78/merge-ut-dictionaries.git
          
          # --- PHASE 1: Generate individual source files ---
          
          echo "--- 1a. Building Wikipedia dictionary (jawiki) ---"
          wget -N 'https://dumps.wikimedia.org/jawiki/latest/jawiki-latest-pages-articles-multistream-index.txt.bz2'
          python3 merge-ut-dictionaries/src/jawiki/convert_jawiki.py jawiki-latest-pages-articles-multistream-index.txt.bz2
          # <<< DEBUG: Preview content of the generated file >>>
          echo "Preview of jawiki dictionary:"
          head -n 5 mozcdic-ut-jawiki.txt
          echo "Word count: $(wc -l < mozcdic-ut-jawiki.txt)"


          echo "--- 1b. Building NEologd dictionary ---"
          wget -N 'https://github.com/neologd/mecab-ipadic-neologd/raw/master/seed/mecab-user-dict-seed.20200910.csv.xz'
          xz -dfk mecab-user-dict-seed.20200910.csv.xz
          # <<< DEBUG: Preview the downloaded CSV file before processing >>>
          echo "Preview of NEologd seed CSV:"
          head -n 5 mecab-user-dict-seed.20200910.csv
          python3 merge-ut-dictionaries/src/neologd/convert_neologd.py mecab-user-dict-seed.20200910.csv
          echo "Preview of NEologd dictionary:"
          head -n 5 mozcdic-ut-neologd.txt
          echo "Word count: $(wc -l < mozcdic-ut-neologd.txt)"

          echo "--- 1c. Building Personal Names dictionary ---"
          git clone --depth 1 https://github.com/utuhiro78/mozcdic-ut-personal-names.git
          mv mozcdic-ut-personal-names/mozcdic-ut-names.txt ./mozcdic-ut-personal-names.txt
          echo "Preview of Personal Names dictionary:"
          head -n 5 mozcdic-ut-personal-names.txt
          echo "Word count: $(wc -l < mozcdic-ut-personal-names.txt)"
          
          echo "--- 1d. Building Place Names dictionary ---"
          python3 merge-ut-dictionaries/src/place-names/generate_place_names.py jawiki-latest-pages-articles-multistream-index.txt.bz2
          echo "Preview of Place Names dictionary:"
          head -n 5 mozcdic-ut-place-names.txt
          echo "Word count: $(wc -l < mozcdic-ut-place-names.txt)"

          # --- PHASE 2: Merge and apply scores ---
          
          echo "--- 2a. Merging all source files ---"
          cat mozcdic-ut-*.txt > merged-dictionary-raw.txt
          echo "Raw dictionary contains $(wc -l < merged-dictionary-raw.txt) words."

          echo "--- 2b. Applying final scores using the Python script ---"
          python3 merge-ut-dictionaries/src/merge/merge_ut_dic.py merged-dictionary-raw.txt
          
          echo "--- Verifying final scored dictionary ---"
          echo "Total lines: $(wc -l < merged-dictionary-raw.txt)"
          echo "Lines with score 0: $(grep -c -E '\t0$' merged-dictionary-raw.txt || true)"
          echo "Preview of lines with non-zero scores:"
          grep -v -E '\t0$' merged-dictionary-raw.txt | head -n 5
          
          echo "--- Moving final dictionary ---"
          mv merged-dictionary-raw.txt ../dic/custom-dictionary.txt

          cd ..
          rm -rf build_temp
          
          echo "--- Verifying final contents of ./dic directory ---"
          ls -lR dic

      # <<< DEBUG: Upload intermediate dictionary file as an artifact >>>
      # This allows you to download and inspect the file even if later steps fail.
      - name: Upload Intermediate Artifact
        uses: actions/upload-artifact@v4
        with:
          name: intermediate-dictionary
          path: dic/custom-dictionary.txt

      # 5. Download Mozc base dictionaries
      - name: Download Mozc Dictionaries
        run: |
          set -x
          MOZC_BASE_URL="https://raw.githubusercontent.com/google/mozc/master/src/data/dictionary_oss"
          mkdir -p mozc
          for i in $(seq -f "%02g" 0 9); do
            wget -P ./mozc/ "${MOZC_BASE_URL}/dictionary${i}.txt"
          done
          wget -P ./mozc/ "${MOZC_BASE_URL}/suffix.txt"
          echo "--- Verifying contents of ./mozc directory ---"
          ls -lR mozc

      # 6. Run the main Python script to process and filter all dictionaries.
      - name: Run Dictionary Processing Script
        run: |
          set -x
          echo "--- Running final dictionary processing script ---"
          python ./process_dictionaries.py
          echo "--- Script finished. Final state of dictionary directory: ---"
          ls -lR dic

      # 7. Commit and push updated files on scheduled runs.
      - name: Commit files
        if: github.event_name == 'schedule'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(bot): Automatically update dictionary files"
          file_pattern: "dic/*.txt"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "GitHub Actions Bot <github-actions[bot]@users.noreply.github.com>"

      # 8. Package generated dictionary files into a zip archive for the release.
      - name: Package release artifacts
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -x
          zip dictionary-artifacts.zip dic/*.txt

      # 9. Create a new GitHub Release and upload the zip archive as an asset.
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dictionary-artifacts.zip
          name: Dictionary Release ${{ github.ref_name }}
          body: |
            Automated release of updated dictionary files.
            The attached zip file contains all generated dictionaries.
